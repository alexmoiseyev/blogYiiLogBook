<?php

namespace app\models;

use Yii;
use app\models\User;
use app\models\ArticleUser;
use yii\helpers\ArrayHelper;
/**
 * This is the model class for table "article".
 *
 * @property int $id
 * @property string|null $title
 * @property string|null $description
 * @property string|null $content
 * @property string|null $date
 * @property string|null $image
 * @property int|null $viewed
 * @property int|null $user_id
 * @property int|null $likes
 * @property int|null $status
 * @property int|null $category_id
 *
 * @property ArticleTag[] $articleTags
 * @property Comment[] $comments
 */
class Article extends \yii\db\ActiveRecord
{
    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'article';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['title', 'description', 'content'], 'required'],
            [['title', 'description', 'content'], 'string'],
            [['date'], 'date', 'format'=>'php:Y-m-d'],
            [['date'], 'default', 'value'=>date('Y-m-d')],
            [['title'], 'string' ,'max'=>255]
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'title' => 'Title',
            'description' => 'Description',
            'content' => 'Content',
            'date' => 'Date',
            'image' => 'Image',
            'viewed' => 'Viewed',
            'user_id' => 'User ID',
            'status' => 'Status',
            'category_id' => 'Category ID',
            'likes' => 'Likes',
        ];
    }
    public static function find()
    {
        return parent::find()->orderBy(['date' => SORT_DESC]);
    }
    public static function getAll()
    {
        $cache = Yii::$app->cache;
        $key = 'all_articles';
        
        $data = $cache->get($key);
        if ($data === false) {

            $data = Article::find()
            ->orderBy('date desc')
            ->all();
            
            $cache->set($key, $data, 3600);// Кешируем на 1 час
        }
        
        return $data;
    }
    public static function getLatestArticles()
    {
        $cache = Yii::$app->cache;
        $key = 'latest_articles';
        
        $data = $cache->get($key);
        
        if ($data === false) {
            $data = Article::find()
                ->orderBy('date desc')
                ->limit(4)
                ->all();
                
            // Кешируем на 30 минут    
            $cache->set($key, $data, 1800);
        }
        
        return $data;
    }
    public function viewedCounter($id)
    {
        $user = Yii::$app->user->identity;
        if($user){
            $redis = Yii::$app->redis;
            $redis->sadd("article:{$id}:views", $user->id);
            $redis->sadd("user:{$user->id}:views", $id);
            return true;
        }
        
        return false;
    }    
    public function countViews(){
        $redis = Yii::$app->redis;
        return $redis->scard("article:{$this->id}:views");
    }
    public function isViewed($user_id){

        $redis = Yii::$app->redis;
        $key = "user:{$user_id}:views";

        foreach($redis->smembers($key) as $viewedIds){
            if($viewedIds == $this->id){
                return true;
            }
        }
        return false;
    }
        
    public function saveImage($filename)
    {
        $this->image = $filename;
        return $this->save(false);
    }
    public function getImage()
    {
        return ($this->image) ? '/uploads/' . $this->image : '/uploads/no-image.png';
    }

    public function deleteImage()
    {
        $imageUploadModel = new ImageUpload();
        $imageUploadModel->deleteCurrentImage($this->image);
    }

    public function beforeDelete()
    {
        $this->deleteImage();
        return parent::beforeDelete(); // TODO: Change the autogenerated stub
    }
    public function getDate()
    {
        return Yii::$app->formatter->asDate($this->date);
    }

    public function getCategory()
    {
        return $this->hasOne(Category::class, ['id' => 'category_id']);
    }
    public function saveCategory($category_id)
    {
        $category = Category::findOne($category_id);
        if($category != null){
            $this->link('category', $category);
            return true;
        }
        
    }
    public function getTags()
    {
        return $this->hasMany(Tag::className(), ['id' => 'tag_id'])
            ->viaTable('article_tag', ['article_id' => 'id']);
    }
    public function getSelectedTags()
    {
        $selectedIds = $this->getTags()->select('id')->asArray()->all();
        return ArrayHelper::getColumn($selectedIds, 'id');
    }
    public function saveTags($tags)
    {
        if (is_array($tags))
        {
            $this->clearCurrentTags();

            foreach($tags as $tag_id)
            {
                $tag = Tag::findOne($tag_id);
                $this->link('tags', $tag);
            }
        }
    }
    public function getAuthor()
    {
        return $this->hasOne(User::className(), ['id'=>'user_id']);
    }
    public function clearCurrentTags()
    {
        ArticleTag::deleteAll(['article_id'=>$this->id]);
    }
   
    public function like($user){

        $redis = Yii::$app->redis;
        $cache = Yii::$app->cache;

        $redis->sadd("article:{$this->id}:likes", $user->id);
        $redis->sadd("user:{$user->id}:likes", $this->id);
        
        $cache->delete('likes_count_' . $this->id);
    }

    public function unLike($user){
        $redis = Yii::$app->redis;
        $redis->srem("article:{$this->id}:likes", $user->id);
        $redis->srem("user:{$user->id}:likes", $this->id);
    }
    public function countLikes(){    
        $redis = Yii::$app->redis;
        return $redis->scard("article:{$this->id}:likes");
    }
    public function saveArticle(){
        $this->user_id = Yii::$app->user->id;
        $this->date=date('Y-m-d');
        $cache = Yii::$app->cache;
    
    if ($this->save(false)) {
        
        $cache->delete('all_articles');
        $cache->delete('latest_articles');

        return true;
    }
    return false;
    }
}
